{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sarah-alhajri/CNN_MLP/blob/main/PetFinder.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0vJ45v2AiLLE",
        "outputId": "ad5faa39-ad7a-4179-cbbe-eac1a45961b2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import keras\n",
        "from keras.utils import load_img\n",
        "from keras.utils import img_to_array \n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "import seaborn as sns\n",
        "import seaborn as sn\n",
        "import random\n",
        "import cv2\n",
        "import glob\n",
        "import os\n",
        "import re\n",
        "import pandas as pd\n",
        "from PIL import Image\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "import plotly.express as px\n",
        "from keras.utils import to_categorical\n",
        "from sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score, multilabel_confusion_matrix\n",
        "import tensorflow as tf\n",
        "from keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization, Conv2D, MaxPooling2D\n",
        "from keras.models import Model, Sequential\n",
        "from keras import regularizers, optimizers\n",
        "from keras.optimizers import Adam\n",
        "from keras.layers import concatenate\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from matplotlib import pyplot as plt\n",
        "from matplotlib import image \n"
      ],
      "metadata": {
        "id": "3kG5y0542DjC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zYzOHcEAtgWy"
      },
      "outputs": [],
      "source": [
        "def load_data(path_to_data):\n",
        "\n",
        "  df_train = pd.read_csv(f'{path_to_data}/train.csv')\n",
        "\n",
        "  # Display the head records from the dataset.\n",
        "  print(df_train.head())\n",
        "\n",
        "  # Display the basic statistics for each feature such as count, mean, std, min, max, â€¦ etc.\n",
        "  print(df_train.describe())\n",
        "\n",
        "  # Display label distribution.\n",
        "  sns.displot(df_train, x=\"AdoptionSpeed\",discrete=True)\n",
        "\n",
        "  # Visualize the correlation between each feature and the label\n",
        "  corrMatrix = df_train.corr()[['AdoptionSpeed']]\n",
        "  sn.heatmap(corrMatrix, annot=True)\n",
        "  plt.show()\n",
        " \n",
        "  # Visualize the distribution for all continuous value features using histograms.\n",
        "  df_train.hist(column=['Age','Fee','VideoAmt','PhotoAmt','Quantity'])\n",
        "  return df_train\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g-HW1BFfSheO"
      },
      "outputs": [],
      "source": [
        "#Splits the dataset into train and test sets following 80/20 partition\n",
        "def split_data(data):\n",
        "  y= data.AdoptionSpeed\n",
        "  x=data.drop('AdoptionSpeed',axis=1)\n",
        "  train_X, test_X, train_y, test_y = train_test_split(x,y,test_size=0.2)\n",
        "  return train_X ,test_X,train_y,test_y"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IYAMxhhHATDb"
      },
      "outputs": [],
      "source": [
        "# rootdir = '/content/drive/MyDrive/sample_images/train_images1' \n",
        "def duplicated_images(rootdir,train_path):\n",
        "  regex_img = re.compile('[a-zA-Z0-9]*-[1]\\.jpg')\n",
        "  for root, dirs, files in os.walk(rootdir):\n",
        "    for file in files:\n",
        "      if regex_img.match(file):\n",
        "        continue\n",
        "      else:\n",
        "        os.remove(rootdir+'/'+file)\n",
        "      \n",
        "  #delete rows(pets) from csv that doesn't have images \n",
        "  df=pd.read_csv(train_path)\n",
        "  i=df[df['PhotoAmt'] == 0].index\n",
        "  df=df.drop(i)\n",
        "  df.to_csv('train.csv', index=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FFSLHwoETsXD"
      },
      "outputs": [],
      "source": [
        "#preprocessing the images\n",
        " \n",
        "\n",
        "def preprocess_image(train_X, test_X, path_img):\n",
        "    train_images = []\n",
        "    test_images = []\n",
        "   \n",
        "    for img_name in train_X['PetID']:\n",
        "        img_path = f\"{path_img}{img_name}\"\n",
        "        image = tf.keras.preprocessing.image.load_img(img_path)\n",
        "        image = image.resize((32,32))\n",
        "        image2 = image.convert('RGB')\n",
        "        image2 = np.asarray(image2)\n",
        "        train_images.append(image2)\n",
        "    \n",
        "    for test_img_name in test_X['PetID']:\n",
        "        test_img_path = f\"{path_img}{test_img_name}\"\n",
        "        image3 = tf.keras.preprocessing.image.load_img(test_img_path)\n",
        "        image3 = image3.resize((32,32))\n",
        "        image3 = image3.convert('RGB')\n",
        "        image3 = np.asarray(image3)\n",
        "        test_images.append(image3)\n",
        "       \n",
        "    return np.array(train_images), np.array(test_images)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VHDGiAs53zUx"
      },
      "outputs": [],
      "source": [
        "\n",
        "def preprocess_data(train_X,test_X,train_y,test_y):\n",
        "    pr_train_X = train_X.copy()\n",
        "    pr_test_X=test_X.copy()\n",
        "    onehot_encoded = pd.get_dummies(pr_train_X[['Type','Breed1', 'Breed2', 'Color1', 'Color2','Color3','Gender','MaturitySize','FurLength','Vaccinated','Dewormed','Sterilized','Health','State']])\n",
        "    pr_train_X = pd.concat([pr_train_X, onehot_encoded], axis=1)\n",
        "    pr_train_X = pr_train_X.drop(['Type','Breed1', 'Breed2', 'Color1', 'Color2','Color3','Gender','MaturitySize','FurLength','Vaccinated','Dewormed','Sterilized','Health','State'],axis=1)\n",
        "    \n",
        "    onehot_encoded = pd.get_dummies(pr_test_X[['Type','Breed1', 'Breed2', 'Color1', 'Color2','Color3','Gender','MaturitySize','FurLength','Vaccinated','Dewormed','Sterilized','Health','State']])\n",
        "    pr_test_X = pd.concat([pr_test_X, onehot_encoded], axis=1)\n",
        "    pr_test_X = pr_test_X.drop(['Type','Breed1', 'Breed2', 'Color1', 'Color2','Color3','Gender','MaturitySize','FurLength','Vaccinated','Dewormed','Sterilized','Health','State'],axis=1)\n",
        "\n",
        "    # Scale continuous data to be in the range of [0, 1]\n",
        "    features = ['Age','Quantity','Fee','VideoAmt','PhotoAmt']\n",
        "    scaler = MinMaxScaler()\n",
        "    pr_train_X[features] = scaler.fit_transform(pr_train_X[features])\n",
        "    pr_test_X[features] = scaler.transform(pr_test_X[features])\n",
        "\n",
        "    # One-hot encode the labels\n",
        "    pr_train_y = pd.get_dummies(train_y)\n",
        "    pr_test_y = pd.get_dummies(test_y)\n",
        "    return pr_train_X, pr_test_X, pr_train_y, pr_test_y\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YZVHGHW-GgR9"
      },
      "outputs": [],
      "source": [
        "def create_mlp(dims):\n",
        "    model = Sequential()\n",
        "    model.add(Dense(512, input_dim=dims, activation=\"relu\"))\n",
        "    model.add(Dropout(0.2))\n",
        "    model.add(Dense(256, activation=\"relu\"))\n",
        "    model.add(Dropout(0.2))\n",
        "    model.add(Dense(4, activation=\"softmax\"))\n",
        "  \n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l0ZpH6RFEek6"
      },
      "outputs": [],
      "source": [
        "def create_CNN(width, height, depth, filters=(16, 32, 64)):\n",
        "  model = Sequential()\n",
        "  filters=(16, 32, 64)\n",
        "  #number of filters = 16, filter size = 3 * 3\n",
        "  model.add(Conv2D(16, (3, 3), activation='relu', input_shape=(height, width, depth), strides=(1, 1), padding=\"same\"))\n",
        "  model.add(MaxPooling2D((2, 2)))\n",
        "\n",
        "  #number of filters = 32, filter size = 3 * 3\n",
        "  model.add(Conv2D(32, (3, 3), activation='relu'))\n",
        "  model.add(MaxPooling2D((2, 2)))\n",
        "\n",
        "  #number of filters = 64, filter size = 3 * 3\n",
        "  model.add(Conv2D(64, (3, 3), activation='relu'))\n",
        "  model.add(MaxPooling2D((2, 2)))\n",
        "\n",
        "  # creating the dense layer or the Fully connected layer FC \n",
        "  model.add(Flatten())\n",
        "  # model.add(Dense(64, activation='relu'))\n",
        "  # model.add(Dense(filters))\n",
        "  cnn_model.add(Dense(128, activation='relu'))\n",
        "  cnn_model.add(Dense(5, activation='softmax'))\n",
        " \n",
        "\n",
        "  return model\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jTLiAx-Cj4R3"
      },
      "outputs": [],
      "source": [
        "def combine_mlp_cnn(mlp_model, cnn_model):\n",
        "  combinedInput = concatenate([mlp_model.output, cnn_model.output])\n",
        "  x = Dense(4, activation=\"relu\")(combinedInput)\n",
        "  x = Dense(5, activation=\"softmax\")(x)  \n",
        "  model = Model(inputs=[mlp_model.input, cnn_model.input], outputs=x)\n",
        "  return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UXwJ1cvKr8si"
      },
      "outputs": [],
      "source": [
        "def train_model(train_X, train_y, model):\n",
        "    # Compile the model with Adam optimizer and an appropriate loss function\n",
        "    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\n",
        "    \n",
        "    # Train the model on the input training data with a validation set\n",
        "    model.fit((train_X), train_y, epochs=10, batch_size=32, validation_split=0.2)\n",
        "    \n",
        "    # Return the trained model\n",
        "    return model\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mBfBU024f7Hl"
      },
      "outputs": [],
      "source": [
        "def evaluate_model(test_X, test_y, model):\n",
        "\n",
        "  # predicting the test input \n",
        "  y_predict=model.predict(test_X)\n",
        "  y=np.argmax(y_predict, axis=1)\n",
        "  test_y=np.argmax(test_y, axis=1)\n",
        "\n",
        "  # accuracy: (tp + tn) / (p + n)\n",
        "  accuracy = accuracy_score(test_y, y)\n",
        "\n",
        "  # precision tp / (tp + fp)\n",
        "  precision = precision_score(test_y, y, average='macro')\n",
        " \n",
        "  # recall: tp / (tp + fn)\n",
        "  recall = recall_score(test_y, y, average='macro')\n",
        " \n",
        "  # f1: 2 tp / (2 tp + fp + fn)\n",
        "  f1_score = 2 * ((recall * precision) / (recall + precision)) \n",
        "\n",
        "  return accuracy, precision, recall, f1_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PVd8EYcBZIVj",
        "outputId": "18807b6b-27d2-40c0-d224-f51cb380b4db",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Type         Name  Age  Breed1  Breed2  Gender  Color1  Color2  Color3  \\\n",
            "0     2       Nibble    3     299       0       1       1       7       0   \n",
            "1     2  No Name Yet    1     265       0       1       1       2       0   \n",
            "2     1       Brisco    1     307       0       1       2       7       0   \n",
            "3     1         Miko    4     307       0       2       1       2       0   \n",
            "4     1       Hunter    1     307       0       1       1       0       0   \n",
            "\n",
            "   MaturitySize  ...  Health  Quantity  Fee  State  \\\n",
            "0             1  ...       1         1  100  41326   \n",
            "1             2  ...       1         1    0  41401   \n",
            "2             2  ...       1         1    0  41326   \n",
            "3             2  ...       1         1  150  41401   \n",
            "4             2  ...       1         1    0  41326   \n",
            "\n",
            "                          RescuerID  VideoAmt  \\\n",
            "0  8480853f516546f6cf33aa88cd76c379         0   \n",
            "1  3082c7125d8fb66f7dd4bff4192c8b14         0   \n",
            "2  fa90fa5b1ee11c86938398b60abc32cb         0   \n",
            "3  9238e4f44c71a75282e62f7136c6b240         0   \n",
            "4  95481e953f8aed9ec3d16fc4509537e8         0   \n",
            "\n",
            "                                         Description      PetID PhotoAmt  \\\n",
            "0  Nibble is a 3+ month old ball of cuteness. He ...  86e1089a3      1.0   \n",
            "1  I just found it alone yesterday near my apartm...  6296e909a      2.0   \n",
            "2  Their pregnant mother was dumped by her irresp...  3422e4906      7.0   \n",
            "3  Good guard dog, very alert, active, obedience ...  5842f1ff5      8.0   \n",
            "4  This handsome yet cute boy is up for adoption....  850a43f90      3.0   \n",
            "\n",
            "   AdoptionSpeed  \n",
            "0              2  \n",
            "1              0  \n",
            "2              3  \n",
            "3              2  \n",
            "4              2  \n",
            "\n",
            "[5 rows x 24 columns]\n",
            "               Type           Age        Breed1        Breed2        Gender  \\\n",
            "count  14652.000000  14652.000000  14652.000000  14652.000000  14652.000000   \n",
            "mean       1.458231     10.362476    265.668441     74.088452      1.774297   \n",
            "std        0.498269     18.054302     59.704696    123.126152      0.679899   \n",
            "min        1.000000      0.000000      0.000000      0.000000      1.000000   \n",
            "25%        1.000000      2.000000    265.000000      0.000000      1.000000   \n",
            "50%        1.000000      3.000000    266.000000      0.000000      2.000000   \n",
            "75%        2.000000     11.000000    307.000000    179.000000      2.000000   \n",
            "max        2.000000    255.000000    307.000000    307.000000      3.000000   \n",
            "\n",
            "             Color1        Color2        Color3  MaturitySize     FurLength  \\\n",
            "count  14652.000000  14652.000000  14652.000000  14652.000000  14652.000000   \n",
            "mean       2.229525      3.234917      1.877218      1.863636      1.465602   \n",
            "std        1.741054      2.742982      2.982534      0.546740      0.598366   \n",
            "min        1.000000      0.000000      0.000000      1.000000      1.000000   \n",
            "25%        1.000000      0.000000      0.000000      2.000000      1.000000   \n",
            "50%        2.000000      2.000000      0.000000      2.000000      1.000000   \n",
            "75%        3.000000      6.000000      5.000000      2.000000      2.000000   \n",
            "max        7.000000      7.000000      7.000000      4.000000      3.000000   \n",
            "\n",
            "         Vaccinated      Dewormed    Sterilized        Health     Quantity  \\\n",
            "count  14652.000000  14652.000000  14652.000000  14652.000000  14652.00000   \n",
            "mean       1.730003      1.555010      1.911411      1.035968      1.56668   \n",
            "std        0.666377      0.694109      0.564640      0.196905      1.45259   \n",
            "min        1.000000      1.000000      1.000000      1.000000      1.00000   \n",
            "25%        1.000000      1.000000      2.000000      1.000000      1.00000   \n",
            "50%        2.000000      1.000000      2.000000      1.000000      1.00000   \n",
            "75%        2.000000      2.000000      2.000000      1.000000      1.00000   \n",
            "max        3.000000      3.000000      3.000000      3.000000     20.00000   \n",
            "\n",
            "                Fee         State      VideoAmt      PhotoAmt  AdoptionSpeed  \n",
            "count  14652.000000  14652.000000  14652.000000  14652.000000   14652.000000  \n",
            "mean      21.282760  41345.982869      0.058013      3.979730       2.502662  \n",
            "std       78.522639     32.425690      0.349994      3.476738       1.170092  \n",
            "min        0.000000  41324.000000      0.000000      1.000000       0.000000  \n",
            "25%        0.000000  41326.000000      0.000000      2.000000       2.000000  \n",
            "50%        0.000000  41326.000000      0.000000      3.000000       2.000000  \n",
            "75%        0.000000  41401.000000      0.000000      5.000000       4.000000  \n",
            "max     3000.000000  41415.000000      8.000000     30.000000       4.000000  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-83-261598be6ae5>:15: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  corrMatrix = df_train.corr()[['AdoptionSpeed']]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "293/293 [==============================] - 10s 29ms/step - loss: 0.1587 - accuracy: 0.2706 - val_loss: 0.1556 - val_accuracy: 0.2776\n",
            "Epoch 2/10\n",
            "293/293 [==============================] - 8s 28ms/step - loss: 0.1549 - accuracy: 0.2643 - val_loss: 0.1537 - val_accuracy: 0.2776\n",
            "Epoch 3/10\n",
            "293/293 [==============================] - 7s 24ms/step - loss: 0.1537 - accuracy: 0.2674 - val_loss: 0.1528 - val_accuracy: 0.2776\n",
            "Epoch 4/10\n",
            "293/293 [==============================] - 8s 27ms/step - loss: 0.1530 - accuracy: 0.2674 - val_loss: 0.1523 - val_accuracy: 0.2776\n",
            "Epoch 5/10\n",
            "293/293 [==============================] - 7s 24ms/step - loss: 0.1527 - accuracy: 0.2631 - val_loss: 0.1520 - val_accuracy: 0.2776\n",
            "Epoch 6/10\n",
            "293/293 [==============================] - 8s 27ms/step - loss: 0.1525 - accuracy: 0.2656 - val_loss: 0.1518 - val_accuracy: 0.2776\n",
            "Epoch 7/10\n",
            "293/293 [==============================] - 8s 27ms/step - loss: 0.1523 - accuracy: 0.2685 - val_loss: 0.1517 - val_accuracy: 0.2716\n",
            "Epoch 8/10\n",
            "293/293 [==============================] - 7s 24ms/step - loss: 0.1522 - accuracy: 0.2616 - val_loss: 0.1516 - val_accuracy: 0.2716\n",
            "Epoch 9/10\n",
            "293/293 [==============================] - 8s 27ms/step - loss: 0.1522 - accuracy: 0.2669 - val_loss: 0.1515 - val_accuracy: 0.2716\n",
            "Epoch 10/10\n",
            "293/293 [==============================] - 8s 27ms/step - loss: 0.1521 - accuracy: 0.2654 - val_loss: 0.1515 - val_accuracy: 0.2716\n",
            "92/92 [==============================] - 1s 10ms/step\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy:  0.2835209825997953\n",
            "Precision:  0.0567235494880546\n",
            "Recall:  0.2\n",
            "F1_score:  0.08838074980058495\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 6 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization, Conv2D, MaxPooling2D\n",
        "from tensorflow.keras.models import Model, Sequential\n",
        "from tensorflow.keras import regularizers, optimizers\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.layers import concatenate\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from sklearn.model_selection import train_test_split\n",
        "from matplotlib import pyplot as plt\n",
        "from matplotlib import image \n",
        "import seaborn as sns\n",
        "import cv2\n",
        "\n",
        "def main():\n",
        "\n",
        "  # This is the main method of your script and performs the following tasks:\n",
        "  # 1. Load the pet adoption dataset\n",
        "  path_img = '/content/drive/MyDrive/sample_images/train_images1/'  \n",
        "  train_path='/content/train.csv'\n",
        "  duplicated_images(path_img,train_path)\n",
        "  path_to_data='/content'\n",
        "  df=load_data(path_to_data)\n",
        "\n",
        "  df[\"PetID\"]=df[\"PetID\"].apply(lambda PetID: PetID+'-1'+\".jpg\")\n",
        "\n",
        "  # 2. Split the data into train and testing sets\n",
        "  train_X,test_X,train_y,test_y = split_data(df)\n",
        "  # 3. Resize the images to be 32 Ã— 32 pixels\n",
        "  train_imgs,test_imgs = preprocess_image(train_X, test_X, path_img)\n",
        "  # 4. Preprocess the categorical and numerical data as the follows:\n",
        "  # - Normalize the continuous data\n",
        "  # - Encode the categorical data as one-hot representation\n",
        "  # - Encode the labels as one-hot representation\n",
        "  pr_train_X, pr_test_X, pr_train_y, pr_test_y = preprocess_data(train_X,test_X,train_y,test_y)\n",
        "  pr_train_X.drop('PetID', axis=1, inplace=True)\n",
        "  pr_train_X.drop('Name', axis=1, inplace=True)\n",
        "  pr_train_X.drop('RescuerID', axis=1, inplace=True)\n",
        "  pr_train_X.drop('Description', axis=1, inplace=True)\n",
        "\n",
        "  pr_test_X.drop('PetID', axis=1, inplace=True)\n",
        "  pr_test_X.drop('Name', axis=1, inplace=True)\n",
        "  pr_test_X.drop('RescuerID', axis=1, inplace=True)\n",
        "  pr_test_X.drop('Description', axis=1, inplace=True)\n",
        "\n",
        "\n",
        "  # 5. Define the following two models:\n",
        "  # - MLP model\n",
        "  # dims=12\n",
        "  dims=pr_train_X.shape[1]\n",
        "  mlp_model = create_mlp(dims)\n",
        "\n",
        "  # - CNN model\n",
        "  # cnn_model = create_CNN(32, 32, 3, filters= 64)\n",
        "  cnn_model=create_CNN(32, 32, 3, filters=(16, 32, 64)) #G\n",
        "\n",
        "  # 6. Combine the MLP and CNN models into one model\n",
        "  model = combine_mlp_cnn(mlp_model, cnn_model)\n",
        "\n",
        "  # 7. Train the combined model\n",
        "\n",
        "  pr_train_y = np.array(pr_train_y).astype(np.float32)\n",
        "  pr_train_X = np.array(pr_train_X).astype(np.float32)\n",
        "  # train_X = np.concatenate([pr_train_X, train_imgs], axis=1)\n",
        "  trained_model=train_model([pr_train_X, train_imgs], np.array(pr_train_y), model)\n",
        "\n",
        "  # 8. Evaluate the trained model based on its accuracy, precision, recall, and f1-score\n",
        "  test_y = np.array(pr_test_y).astype(np.float32)\n",
        "  test_X = np.array(pr_test_X).astype(np.float32)\n",
        "  accuracy, precision, recall, f1_score = evaluate_model([test_X, test_imgs], test_y, trained_model)\n",
        "\n",
        "  print('Accuracy: ',accuracy)\n",
        "  print('Precision: ',precision)\n",
        "  print('Recall: ',recall)\n",
        "  print('F1_score: ',f1_score)\n",
        "main()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}